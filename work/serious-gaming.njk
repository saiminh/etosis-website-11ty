---
tags: work
title: Serious game developers
layout: layouts/page.njk
svg: "partials/svg/hero-illu-serious-gaming-2.svg"
thumbnail: /img/thumbnail-gamingcompany.svg
card: 
  technologies: "Encryption, Unity3D, C#"
  icon_1: cube
  list_1: "Invent a fully configurable 3D system"
  icon_2: unity
  list_2: "Develop a UI interface for Unity3D"
  icon_3: lock-plus
  list_3: "Encrypt the delivery of copyrighted assets"
---
{% import "macros.html" as macros %}
<div class="hero-bg-illu">
  {% include svg %}
  <div class="elcubo-container">
    <svg id="elcubo" viewBox="0 0 280 280" xmlns="http://www.w3.org/2000/svg" onload="init(evt)">  
      <style> 
        .edge{
            fill: white;
            stroke: black;
            stroke-width: 1;
        }
        .button{
            fill: #2060dd;
            stroke: #2580ff;
            stroke-width: 1;
        }
        .button:hover{
            stroke-width: 3;
        }
      </style> 
      <script type="text/javascript"> 
        edges = [[0,1],[2,3],[0,2],[1,3],[4,5],[6,7],[4,6],[5,7],[0,4],[1,5],[2,6],[3,7]]
        x_coords = [50,190,50,190,50,190,50,190];
        y_coords = [50,50,190,190,50,50,190,190];
        z_coords = [50,50,50,50,190,190,190,190];
        centre_x = 120;
        centre_y = 120;
        centre_z = 120;
        function init(evt)
        {
            if ( window.svgDocument == null )
            {
                svgDocument = evt.target.ownerDocument;
            }
            drawBox();
        }
        function drawBox()
        {
            for(var i=0; i&lt;edges.length; i++)
            {
                edge = svgDocument.getElementById('edge-'+i);
                edge.setAttributeNS(null, 'x1', x_coords[edges[i][0]]);
                edge.setAttributeNS(null, 'x2', x_coords[edges[i][1]]);
                edge.setAttributeNS(null, 'y1', y_coords[edges[i][0]]);
                edge.setAttributeNS(null, 'y2', y_coords[edges[i][1]]);
            }
        }
        function rotateAboutX(radians)
        {
            for(var i=0; i&lt;x_coords.length; i++)
            {
                y = y_coords[i] - centre_y;
                z = z_coords[i] - centre_z;
                d = Math.sqrt(y*y + z*z);
                theta  = Math.atan2(y, z) + radians;
                y_coords[i] = centre_y + d * Math.sin(theta);
                z_coords[i] = centre_z + d * Math.cos(theta);
            }
            drawBox();
        }
        function rotateAboutY(radians)
        {
            for(var i=0; i&lt;x_coords.length; i++)
            {
                x = x_coords[i] - centre_x;
                z = z_coords[i] - centre_z;
                d = Math.sqrt(x*x + z*z);
                theta  = Math.atan2(x, z) + radians;
                x_coords[i] = centre_x + d * Math.sin(theta);
                z_coords[i] = centre_z + d * Math.cos(theta);
            }
            drawBox();
        }
        function beginRotateX(radians)
        {
            rotateAboutX(radians);
            rotateX_timeout = setInterval("rotateAboutX(" + radians + ")", 20);
        }
        function endRotateX()
      {
            if (typeof(rotateX_timeout) != "undefined")
            {
                clearTimeout(rotateX_timeout);
            }
      }
        function beginRotateY(radians)
        {
            rotateAboutY(radians);
            rotateY_timeout = setInterval("rotateAboutY(" + radians + ")", 20);
        }
        function endRotateY()
      {
            if (typeof(rotateY_timeout) != "undefined")
            {
                clearTimeout(rotateY_timeout);
            }
      }
      </script> 
        <line id="edge-0" class="edge" x1="97.87517608352275" y1="93.10105348444537" x2="216.49089162540096" y2="64.1415426732234"></line>
        <line id="edge-1" class="edge" x1="97.87517608352275" y1="222.0495926448492" x2="216.49089162540096" y2="193.09008183362747"></line>
        <line id="edge-2" class="edge" x1="97.87517608352275" y1="93.10105348444537" x2="97.87517608352275" y2="222.0495926448492"></line>
        <line id="edge-3" class="edge" x1="216.49089162540096" y1="64.1415426732234" x2="216.49089162540096" y2="193.09008183362747"></line>
        <line id="edge-4" class="edge" x1="23.509108374599023" y1="46.909918166372705" x2="142.12482391647728" y2="17.95040735515073"></line>
        <line id="edge-5" class="edge" x1="23.509108374599023" y1="175.85845732677654" x2="142.12482391647728" y2="146.89894651555466"></line>
        <line id="edge-6" class="edge" x1="23.509108374599023" y1="46.909918166372705" x2="23.509108374599023" y2="175.85845732677654"></line>
        <line id="edge-7" class="edge" x1="142.12482391647728" y1="17.95040735515073" x2="142.12482391647728" y2="146.89894651555466"></line>
        <line id="edge-8" class="edge" x1="97.87517608352275" y1="93.10105348444537" x2="23.509108374599023" y2="46.909918166372705"></line>
        <line id="edge-9" class="edge" x1="216.49089162540096" y1="64.1415426732234" x2="142.12482391647728" y2="17.95040735515073"></line>
        <line id="edge-10" class="edge" x1="97.87517608352275" y1="222.0495926448492" x2="23.509108374599023" y2="175.85845732677654"></line>
        <line id="edge-11" class="edge" x1="216.49089162540096" y1="193.09008183362747" x2="142.12482391647728" y2="146.89894651555466"></line>
    </svg>
  </div>
</div>
{{ macros.work_hero(
  herotitle = title, 
  card_technologies = card.technologies, 
  card_list = [ card.list_1, card.list_2, card.list_3 ]
) }}
{{ macros.summary( 
  summarytext = [
    'Serious game development requires serious tooling, especially when you are looking to import existing assets into new and improved game engines.'
  ] 
) }}

{{ macros.challenges(
  challengestext = [
    'Encryption was a particular concern as Unity’s standard asset-downloading algorithms provided no protection and allowed anyone to download and reuse the assets at will.',
    
    'So, how do you import large numbers of assets and scenarios developed for other game engines into Unity, without having to rebuild them from the ground up, while meticulously documenting and encrypting the entire migration process?'
  ],
  challengesbullets = [
    'Integrating existing assets and procedural code into Unity, which is designed primarily as a tool to build games using its own UI.',

    'Creating a highly complex user interface using Unity’s built-in UI.',

    'Adding extra security as Unity’s asset downloading algorithms allow anyone to download and re-use assets.'
  ]
) }}

{{ macros.solutions(
  solutionstext = [
    'Etosis built a layer on top of Unity that dynamically generated environments from an existing scenario description file: an engine that automatically downloaded the required assets and supported generating new game objects as the scenario unfolded.',
    
    'To protect assets like models and textures, Etosis developed an encryption system which could be integrated into the existing asset pipeline with the Unity engine providing support for dynamic loading of these assets via the internet. In short, a system that manipulated file content without requiring a change of format.',

    'Last, Etosis created an extensive UI framework for the Unity 3D engine to offset the complex nature of game development. This allowed developers to build user interfaces to control simulations using both standard components, such as buttons and drop-down lists, as well as data-driven components and forms. The framework ensured that all of this could easily tie into the simulation engine so that it only showed up when needed, and perform actions relevant to the current scenario.'
  ],
  solutionsbullets = [
    'Developed a framework allowing assets to be imported and generated procedurally.',
    'Built a UI framework on top of the Unity engine allowing data binding, forms and animations.',
    'Developed an asset-encrypting algorithm that works on top of Unity’s asset-downloading algorithms.'
  ]
) }}