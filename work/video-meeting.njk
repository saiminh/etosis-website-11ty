---
tags: work
title: Video meeting
layout: layouts/work.njk
svg: "partials/svg/hero-illu-camera-driver.svg"
thumbnail: /img/thumbnail-camera-driver.svg
card: 
  technologies: Windows drivers, Chromium embedded, ReactNative, C++, TypeScript
  icon_1: camera
  list_1: "Create a Windows Camera Driver"
  icon_2: video
  list_2: "Embed a browser engine to create video content"
  icon_3: cursor
  list_3: "Create a user interface"
---
{% import "macros.html" as macros %}

{{ macros.summary( 
  summarytext = [
    'Video meetings have become a standard part of our workday. Most meeting applications provide additional tools to present data during meetings. However, they are specific to the application and cannot be modified. This client develops technology that allows data to be presented directly inside the video stream, which can be used in any application that supports cameras. Etosis developed the Windows drivers and applications to implement this technology.'
  ] 
) }}

{{ macros.challenges(
  challengestext = [
    'The client developed a virtual camera that can overlay real-time information to enhance the video conferencing experience. Windows supports several different frameworks that can create virtual cameras. However, these generally require applications to support this explicitly.',
    
    'To have a virtual camera act like a real camera in every application, one must create a camera driver. Driver development is notoriously tricky and any error can lead to a complete system crash. These errors are also very difficult to debug, as they may occur only in very specific circumstances. Furthermore, given the fact that the client is a startup, they want to efficiently modify camera behaviours as their business develops.'
  ],
  challengesbullets = [
    'Windows driver development is tricky, often leading to “blue screens of death”.',
    'Debugging drivers is extremely difficult.',
    'Client is a startup and needs to be agile.'
  ]
) }}      

{{ macros.solutions(
  solutionstext = [
    'Etosis developed a reliable driver that only knows how to do one thing: display images that are created by a user-mode process.',

    'As the driver itself does almost no work, it’s a lot easier to ensure that it does not cause errors. Etosis created a user-mode process which dealt with the more complex work and that could be easily restarted should an error occur. This simple process made it much easier to add logging, configuration and other tooling.',

    'Etosis built an embedded browser to create the overlays. This allowed the overlays to be developed in standard HTML on a normal web browser. To update the overlays, the client only needed to update the code on their web server.'
  ],
  solutionsbullets = [
    'Developed a minimal driver, which only forwards images.',
    'Created a user-mode process which is easier to debug and support.',
    'Built an embedded web browser to deal with the creation of overlays.'
  ]
) }}      